{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FormView","props","_this","Object","classCallCheck","this","_super","call","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","alert","concat","created","error","handleChange","setState","defineProperty","target","name","value","categories","_this2","_this3","react_default","a","createElement","id","className","onSubmit","onChange","keys","map","key","Component","Question","visibleAnswer","_this$props","src","onClick","questionAction","flipVisibility","style","visibility","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","_this4","pageNumbers","maxPage","Math","ceil","_loop","i","push","selectPage","_this5","components_Search","q","ind","components_Question","category_id","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","_ref","_ref$id","quizCategory","getNextQuestion","previousQuestions","toConsumableArray","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","components_Header","path","react_router_dom","react_router","exact","component","Boolean","hostname","match","e","React","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8a7ab39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/FormView.css';\r\n\r\nclass FormView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `/api/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  submitQuestion = (event) => {\r\n    event.preventDefault();\r\n    $.ajax({\r\n      url: '/api/questions', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        question: this.state.question,\r\n        answer: this.state.answer,\r\n        difficulty: this.state.difficulty,\r\n        category: this.state.category\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        document.getElementById(\"add-question-form\").reset();\r\n        alert(`Successfully added question: ${result.created.question}`)\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to add question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\r\n                  )\r\n                })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/Question.css';\r\n\r\nclass Question extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      visibleAnswer: false\r\n    }\r\n  }\r\n\r\n  flipVisibility() {\r\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, category, difficulty } = this.props;\r\n    return (\r\n      <div className=\"Question-holder\">\r\n        <div className=\"Question\">{question}</div>\r\n        <div className=\"Question-status\">\r\n          <img className=\"category\" src={`${category}.svg`}/>\r\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')}/>\r\n          \r\n        </div>\r\n        <div className=\"show-answer button\"\r\n            onClick={() => this.flipVisibility()}>\r\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\r\n          </div>\r\n        <div className=\"answer-holder\">\r\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from 'react'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: '',\r\n  }\r\n\r\n  getInfo = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitSearch(this.state.query)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.getInfo}>\r\n        <input\r\n          placeholder=\"Search questions...\"\r\n          ref={input => this.search = input}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null,\r\n      searchTerm: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n    this.setState(state =>  ({searchTerm: this.props.searchTerm}))\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `/api/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => {\r\n      if (!!this.state.searchTerm) {\r\n        return this.submitSearch(this.state.searchTerm)\r\n      } else {\r\n        this.setState({searchTerm: null})\r\n        return this.getQuestions()\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `/api/questions/categories/${id}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `/api/questions/searches`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        searchTerm: searchTerm,\r\n        page: this.state.page\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category,\r\n          searchTerm: searchTerm })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm(`are you sure you want to delete the question with id ${id}?`)) {\r\n        $.ajax({\r\n          url: `/api/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            if (!!this.state.searchTerm) {\r\n              return this.submitSearch(this.state.searchTerm)\r\n            } else {\r\n              this.setState({searchTerm: null})\r\n              return this.getQuestions()\r\n            }\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map((id, ) => \r\n            {\r\n              return (\r\n                <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                  {this.state.categories[id]}\r\n                  <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\r\n                </li>\r\n              )}) \r\n\r\n            }\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category_id]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../stylesheets/Header.css';\r\n\r\nclass Header extends Component {\r\n\r\n  navTo(uri){\r\n    window.location.href = window.location.origin + uri;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\r\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\r\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\r\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5; \r\n\r\nclass QuizView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n        quizCategory: null,\r\n        previousQuestions: [], \r\n        showAnswer: false,\r\n        categories: {},\r\n        numCorrect: 0,\r\n        currentQuestion: {},\r\n        guess: '',\r\n        forceEnd: false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `/api/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({type, id=0}) => {\r\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: '/api/questions/random', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [], \r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n  renderPrePlay(){\r\n      return (\r\n          <div className=\"quiz-play-holder\">\r\n              <div className=\"choose-header\">Choose Category</div>\r\n              <div className=\"category-holder\">\r\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n                  {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <div\r\n                      key={id}\r\n                      value={id}\r\n                      className=\"play-category\"\r\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\r\n                      {this.state.categories[id]}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n\r\n  renderFinalScore(){\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer(){\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay(){\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer \r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n        ? this.renderPlay()\r\n        : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n","// import React from 'react';\r\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; // import logo from './logo.svg';\r\n\r\n// import './stylesheets/App.css';\r\n// import FormView from './components/FormView';\r\n// import QuestionView from './components/QuestionView';\r\n// import Header from './components/Header';\r\n// import QuizView from './components/QuizView';\r\n\r\n// class App extends React.Component {\r\n//   render() {\r\n//     return /*#__PURE__*/React.createElement(\"div\", {\r\n//       className: \"App\"\r\n//     }, /*#__PURE__*/React.createElement(Header, {\r\n//       path: true\r\n//     }), /*#__PURE__*/React.createElement(Router, null, /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {\r\n//       path: \"/\",\r\n//       exact: true,\r\n//       component: QuestionView\r\n//     }), /*#__PURE__*/React.createElement(Route, {\r\n//       path: \"/add\",\r\n//       component: FormView\r\n//     }), /*#__PURE__*/React.createElement(Route, {\r\n//       path: \"/play\",\r\n//       component: QuizView\r\n//     }), /*#__PURE__*/React.createElement(Route, {\r\n//       component: QuestionView\r\n//     }))));\r\n//   }\r\n\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\n// import logo from './logo.svg';\r\nimport './stylesheets/App.css';\r\nimport FormView from './components/FormView';\r\nimport QuestionView from './components/QuestionView';\r\nimport Header from './components/Header';\r\nimport QuizView from './components/QuizView';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <Header path />\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={QuestionView} searchTerm={null} />\r\n          <Route path=\"/add\" component={FormView} />\r\n          <Route path=\"/play\" component={QuizView} />\r\n          <Route component={QuestionView} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// console.log('./App.js')\r\nconst e = React.createElement;\r\n\r\nReactDOM.render(e(App), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n//  \"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\r\n"],"sourceRoot":""}